asm_code = """
02D9CAC0 4E800421
02D9C8B0 4E800421
16070018 00000000
04CC0000 3C401607
04CC0004 7C0802A6
04CC0008 90020000
04CC000C 38600001
04CC0010 480002F5
04CC0014 480002C1
04CC0018 39800000
04CC001C 9182001C
04CC0020 C022001C
04CC0024 C082001C
04CC0028 3D804420
04CC002C 9182001C
04CC0030 C042001C
04CC0034 3D8043B4
04CC0038 9182001C
04CC003C C062001C
04CC0040 3D80447A
04CC0044 9182001C
04CC0048 C0A2001C
04CC004C 3D80453B
04CC0050 618C8000
04CC0054 9182001C
04CC0058 C0C2001C
04CC005C 3D800311
04CC0060 618C0D4C
04CC0064 7D8903A6
04CC0068 4E800421
04CC006C 38600000
04CC0070 48000295
04CC0074 48000261
04CC0078 39800000
04CC007C 9182001C
04CC0080 C022001C
04CC0084 C042001C
04CC0088 3D80C51C
04CC008C 618C4000
04CC0090 9182001C
04CC0094 C062001C
04CC0098 4800022D
04CC009C 3D80030F
04CC00A0 618C974C
04CC00A4 7D8903A6
04CC00A8 4E800421
04CC00AC 3D80030E
04CC00B0 618C4B24
04CC00B4 7D8903A6
04CC00B8 4E800421
04CC00BC 3D80030E
04CC00C0 618C9B9C
04CC00C4 7D8903A6
04CC00C8 4E800421
04CC00CC 3D80030E
04CC00D0 618C6268
04CC00D4 7D8903A6
04CC00D8 4E800421
04CC00DC 3D80030E
04CC00E0 618C5284
04CC00E4 7D8903A6
04CC00E8 4E800421
04CC00EC 38600000
04CC00F0 3D80030E
04CC00F4 618C52FC
04CC00F8 7D8903A6
04CC00FC 4E800421
04CC0100 38600004
04CC0104 38800005
04CC0108 3D80030E
04CC010C 618C52A0
04CC0110 7D8903A6
04CC0114 4E800421
04CC0118 3D800310
04CC011C 618C8E10
04CC0120 7D8903A6
04CC0124 4E800421
04CC0128 81820018
04CC012C 2C0C0000
04CC0130 4082004C
04CC0134 39800001
04CC0138 91820018
04CC013C 3C804010
04CC0140 60840000
04CC0144 3CA00001
04CC0148 60A5FFFF
04CC014C 3CA5FFFF
04CC0150 38600000
04CC0154 4800020D
04CC0158 90620010
04CC015C 48000225
04CC0160 90620014
04CC0164 3C60109D
04CC0168 8063D8E4
04CC016C 80630100
04CC0170 80820010
04CC0174 80A20014
04CC0178 480001F9
04CC017C 80820014
04CC0180 480001B5
04CC0184 480001CD
04CC0188 80630000
04CC018C 90620020
04CC0190 48000195
04CC0194 3D803F80
04CC0198 9182001C
04CC019C C022001C
04CC01A0 3D803F80
04CC01A4 9182001C
04CC01A8 C042001C
04CC01AC C062001C
04CC01B0 48000115
04CC01B4 80620020
04CC01B8 4800015D
04CC01BC 39800000
04CC01C0 9182001C
04CC01C4 C022001C
04CC01C8 C082001C
04CC01CC 3D8043B4
04CC01D0 9182001C
04CC01D4 C042001C
04CC01D8 3D80C2B4
04CC01DC 9182001C
04CC01E0 C062001C
04CC01E4 3D803F80
04CC01E8 9182001C
04CC01EC C0A2001C
04CC01F0 80620020
04CC01F4 480000C1
04CC01F8 3D804420
04CC01FC 9182001C
04CC0200 C022001C
04CC0204 3D8043B4
04CC0208 9182001C
04CC020C C042001C
04CC0210 3D80C2B4
04CC0214 9182001C
04CC0218 C062001C
04CC021C 3D803F80
04CC0220 9182001C
04CC0224 C082001C
04CC0228 C0A2001C
04CC022C 80620020
04CC0230 48000085
04CC0234 3D804420
04CC0238 9182001C
04CC023C C022001C
04CC0240 39800000
04CC0244 9182001C
04CC0248 C042001C
04CC024C C0A2001C
04CC0250 3D80C2B4
04CC0254 9182001C
04CC0258 C062001C
04CC025C 3D803F80
04CC0260 9182001C
04CC0264 C082001C
04CC0268 80620020
04CC026C 48000049
04CC0270 39800000
04CC0274 9182001C
04CC0278 C022001C
04CC027C C042001C
04CC0280 C082001C
04CC0284 C0A2001C
04CC0288 3D80C2B4
04CC028C 9182001C
04CC0290 C062001C
04CC0294 80620020
04CC0298 4800001D
04CC029C 80620020
04CC02A0 48000045
04CC02A4 48000051
04CC02A8 80020000
04CC02AC 7C0803A6
04CC02B0 4E800020
04CC02B4 3D8002FD
04CC02B8 618C2AF4
04CC02BC 7D8903A6
04CC02C0 4E800420
04CC02C4 3D80030E
04CC02C8 618C4B54
04CC02CC 7D8903A6
04CC02D0 4E800420
04CC02D4 3D800310
04CC02D8 618C3080
04CC02DC 7D8903A6
04CC02E0 4E800420
04CC02E4 3D8002FD
04CC02E8 618C2288
04CC02EC 7D8903A6
04CC02F0 4E800420
04CC02F4 3D80030E
04CC02F8 618C4BD8
04CC02FC 7D8903A6
04CC0300 4E800420
04CC0304 3D800310
04CC0308 618C3064
04CC030C 7D8903A6
04CC0310 4E800420
04CC0314 3D8002FD
04CC0318 618C33F8
04CC031C 7D8903A6
04CC0320 4E800420
04CC0324 3D80030E
04CC0328 618C4B3C
04CC032C 7D8903A6
04CC0330 4E800420
04CC0334 3C60109D
04CC0338 8063D8E4
04CC033C 80630100
04CC0340 3D800338
04CC0344 618CEE78
04CC0348 7D8903A6
04CC034C 4E800420
04CC0350 3D800333
04CC0354 618C7EF0
04CC0358 7D8903A6
04CC035C 4E800420
04CC0360 3D800302
04CC0364 618C9A40
04CC0368 7D8903A6
04CC036C 4E800420
04CC0370 3D800338
04CC0374 618CF694
04CC0378 7D8903A6
04CC037C 4E800420
04CC0380 3D800312
04CC0384 618C4EF8
04CC0388 7D8903A6
04CC038C 4E800420
04100000 4E800421
04100004 3D8004CC
04100008 7D8903A6
0410000C 4E800421
04100010 4AC9C8A4
04100020 4E800421
04100024 3D8004CC
04100028 7D8903A6
0410002C 4E800421
04100030 4AC9CA94
02D9CAC0 49363560
02D9C8B0 49363750
"""[1:-1]

import binascii
import socket
import os
from glob import glob
from requests import get

ENCODING = "utf-8"

class tcpgecko():
    def __init__(self, ip_addr):
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, socket.IPPROTO_TCP)
        self.s.settimeout(1)
        self.s.connect((ip_addr, 7331))
    
    def send(self, arg: list):
        for x in arg:
            self.s.send(bytes.fromhex("03"))
            self.s.send(bytes.fromhex(x))

    def remove(self, arg: list):
        for x in arg:
            self.s.send(bytes.fromhex("03"))
            self.s.send(bytes.fromhex(x))

def clear() -> None: os.system("cls")

def digit(arg: int) -> int: return len(str(len(arg)))

def select(arg: list) -> None:
    while len(arg) >= 1:
        clear()
        try:
            index = int(input("\n".join([str(i+1).rjust(digit(arg), " ") + " │ " + x[:-4] for i,x in enumerate(arg)])+"\n選択 > "))-1
            if index < 0: raise
            return arg[index]
        except: pass

def splitcode(arg: str) -> list:
    return [hex(0x40100000+x*4)[2:].zfill(8) + arg[x*8:x*8+8].zfill(8) for x in range(len(arg)//8)]

def encodings():
    global ENCODING
    ENCODING = input("Encoding > ")

def connect():
    global tcp
    while not os.path.isfile("ip.txt"):
        clear()
        try:
            tmp = input("IP > 192.168.")
            if tmp == "encoding":
                encodings()
            tcp = tcpgecko("192.168."+tmp)
            with open("ip.txt", "w", encoding=ENCODING) as f:
                f.write("192.168."+tmp)
            break
        except: pass
    else:
        while True:
            try:
                with open("ip.txt", "r", encoding=ENCODING) as f: tcp = tcpgecko(f.read())
                break
            except:
                os.remove("ip.txt")
                connect()

def main():
    connect()

    png = select(glob("*.png"))

    if os.path.getsize(png) >= 65000:
        return
    with open(png, "rb") as f:
        tcp.send(splitcode(str(binascii.hexlify(f.read()))[2:-1]))
        tcp.send(asm_code.splitlines())
    
if __name__ == "__main__":
    main()